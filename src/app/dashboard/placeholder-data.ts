export interface CapsuleProgress {
    id: string;
    title: string;
    description: string;
    overall_progress: number;
}

export interface SavedCapsule {
    id: string;
    title: string;
    description: string;
}

export interface Capsule {
    id: string;
    title: string;
    description: string;
    content: { page: number; page_title: string; body: string }[];
    last_page_read?: number;
    overall_progress?: number;
    bookmarked_date?: string;
}

export const continueLearningSample: CapsuleProgress = {
    id: "0",
    title: "Intro to Typescript",
    description:
        "A concise guide to get you started with TypeScript — types, interfaces, and tooling.",
    overall_progress: 24.6,
};

export const recentlySavedSamples: SavedCapsule[] = [
    {
        id: "1",
        title: "Setting Up a React Project",
        description:
            "A comprehensive guide to setting up a new React project from scratch.",
    },
    {
        id: "2",
        title: "React Hooks Guide",
        description:
            "Learn how to use useState, useEffect, and other hooks in React applications.",
    },
    {
        id: "3",
        title: "Node.js Best Practices",
        description:
            "Essential tips for building scalable and secure Node.js applications.",
    },
];

export const userCapsuleContentSamples: Capsule[] = [
    {
        id: "1",
        title: "Setting Up a React Project",
        description:
            "A comprehensive guide to setting up a new React project from scratch.",
        content: [
            {
                page: 1,
                page_title: "Step 1: Prerequisites and Tools",
                body: "# Step 1: Prerequisites and Tools\n\n## Comprehensive Installation Guide for Node.js and npm\n\n1. **Install Node.js and npm**:  \n   - Begin by navigating your web browser to the official Node.js website at [nodejs.org](https://nodejs.org). \n   - You will notice there are two different versions available for download: the LTS (Long Term Support) version and the Current version. For most users and especially those who are beginners, it is highly recommended to download the LTS version as it generally offers greater stability and is more widely supported across various ecosystems and environments.\n   - Once you have made your selection, proceed to click on the appropriate download button that corresponds to your operating system, whether it be Windows, macOS, or Linux. The website should automatically detect your OS and provide the correct download link, but always ensure you are downloading the correct version for your system architecture (32-bit vs 64-bit).\n   - After the download has completed, locate the installer file in your downloads folder and double-click to initiate the installation process. Follow the on-screen instructions provided by the Node.js setup wizard. You can accept the default settings unless you have specific requirements or preferences that necessitate custom installation paths or components.\n   - To verify that the installation was completed successfully and that both Node.js and npm have been properly installed on your system, open your command line interface (Command Prompt on Windows, Terminal on macOS/Linux) and execute the following commands, which will display the currently installed versions of both tools:\n     ```bash\n     node -v\n     npm -v\n     ```\n   - If these commands return version numbers without any errors, congratulations! You have successfully installed Node.js and npm on your machine. If you encounter any issues, please revisit the installation steps or consult the Node.js documentation for troubleshooting advice.\n\n2. **Choose a Code Editor**:  \n   - While you can technically use any text editor to write code, using a dedicated code editor or Integrated Development Environment (IDE) will significantly enhance your productivity and overall development experience. \n   - We highly recommend using Visual Studio Code (VS Code), which is a free, open-source, and incredibly powerful editor developed by Microsoft. It offers a vast ecosystem of extensions, built-in terminal, intelligent code completion, debugging capabilities, and seamless Git integration.\n   - Alternatively, you may consider other popular editors such as WebStorm, Atom, or Sublime Text, depending on your personal preferences and specific workflow requirements. However, for the purposes of this tutorial and given its widespread adoption in the React community, we will assume the use of VS Code in subsequent examples and explanations.",
            },
            {
                page: 2,
                page_title: "Step 2: Create the React Project",
                body: "# Step 2: Create the React Project\n\n## Detailed Project Initialization Process\n\n1. **Initialize the Project**:  \n   - First, open your preferred terminal application. This could be the built-in terminal in VS Code (which can be accessed by pressing `Ctrl + ` or by going to View > Terminal) or your system's default terminal application.\n   - Before running the create command, you may want to navigate to the directory where you want your new React project to be created. You can use the `cd` command to change directories (e.g., `cd Documents/Projects`).\n   - Now, execute the following command to create a new React application using Create React App, which is an officially supported tool for bootstrapping React projects with zero configuration:\n   ```bash\n   npx create-react-app my-app\n   ```\n   - Note that `npx` is a package runner tool that comes with npm (version 5.2+). It will automatically download and execute the latest version of Create React App without requiring a global installation.\n   - The creation process may take several minutes to complete as it needs to download all necessary dependencies and set up the initial project structure. Please be patient and do not interrupt this process.\n   - Once the creation process has finished, navigate into your newly created project directory using:\n   ```bash\n   cd my-app\n   ```\n   - Important: Remember to replace `my-app` with your desired project name, which should be written in lowercase letters and hyphens instead of spaces (following kebab-case convention). Also ensure that the project name is a valid npm package name (no capital letters, spaces, or special characters besides hyphens and underscores).\n\n2. **Start the Development Server**:  \n   - While still in the project directory in your terminal, start the development server by running:\n   ```bash\n   npm start\n   ```\n   - This command will initiate the development server, which will automatically compile your React code and open a new tab in your default web browser pointing to `http://localhost:3000` where you can view your application.\n   - The development server includes hot reloading functionality, meaning any changes you make to the source code will automatically be reflected in the browser without needing to manually refresh the page, significantly speeding up your development workflow.\n   - If port 3000 is already in use by another application on your system, the terminal will prompt you to confirm whether you would like to run the app on another available port. Typically, you can simply press 'y' to accept the suggestion and continue.",
            },
            {
                page: 3,
                page_title: "Step 3: Project Structure Overview",
                body: "# Step 3: Project Structure Overview\n\n## Comprehensive Directory Structure Explanation\n\nAfter creating your React application, you will find the following directory structure generated by Create React App:\n\n```\nmy-app/\n├── public/\n│   ├── index.html\n│   ├── favicon.ico\n│   ├── logo192.png\n│   ├── logo512.png\n│   ├── manifest.json\n│   └── robots.txt\n├── src/\n│   ├── components/    (Note: You will need to create this folder yourself)\n│   ├── App.js\n│   ├── App.css\n│   ├── App.test.js\n│   ├── index.js\n│   ├── index.css\n│   ├── logo.svg\n│   └── serviceWorker.js\n│   └── setupTests.js\n├── package.json\n├── package-lock.json\n├── README.md\n└── node_modules/ (directory - automatically created during installation)\n```\n\n### Detailed Explanation of Key Files and Directories:\n\n- **public/**: This directory contains static assets that will be served directly without processing by Webpack.\n  - `index.html`: The main HTML template that React will use to mount your application. This is where the root div element is located.\n  - `favicon.ico`: The icon that appears in the browser tab.\n  - `manifest.json`: Provides metadata used when your web app is installed on a user's mobile device or desktop.\n\n- **src/**: This is where your actual React source code resides.\n  - `App.js`: The root component of your React application where you will build your main UI.\n  - `App.css`: Styles specific to the App component.\n  - `index.js`: The entry point of your React application where React DOM rendering is initialized.\n  - `index.css`: Global styles that apply to your entire application.\n\n- **package.json**: Contains metadata about your project and lists the dependencies your project needs.\n\n- **node_modules/**: Contains all downloaded npm packages and dependencies (this directory is automatically generated and should not be modified manually).\n\nIt's worth noting that while Create React App provides a sensible default structure, you are encouraged to organize your code according to your project's needs, which may involve creating additional directories such as `components`, `pages`, `utils`, `hooks`, etc.",
            },
            {
                page: 4,
                page_title: "Step 4: Customize the Structure",
                body: "# Step 4: Customize the Structure\n\n## Comprehensive Guide to Project Customization\n\n1. **Create a `components` Folder**:  \n   - To better organize your code and follow React best practices, it's highly recommended to create a dedicated folder for your components inside the `src/` directory.\n   - You can create this folder using your operating system's file explorer or directly within VS Code by right-clicking on the `src` folder, selecting \"New Folder,\" and naming it \"components.\"\n   - Alternatively, you can use the terminal/command line while in your project directory with the command: `mkdir src/components` (on macOS/Linux) or `md src\\components` (on Windows).\n   - This components folder will serve as a central location for all your reusable UI components, making your codebase more organized, maintainable, and scalable as your project grows in complexity.\n\n2. **Clean Up Boilerplate Code**:  \n   - Create React App includes some example code that you will likely want to remove to start with a clean slate. Open `App.js` and replace the entire content with a minimal component:\n   ```jsx\n   import './App.css';\n\n   function App() {\n     return (\n       <div className=\"App\">\n         <h1>Hello World!</h1>\n       </div>\n     );\n   }\n\n   export default App;\n   ```\n   - Similarly, you can remove all content from `App.css` to start with empty stylesheets, or keep some basic reset styles if desired.\n   - You may also want to remove the default React logo (logo.svg) and other unused assets to keep your project clean.\n\n3. **Create Your First Component**:  \n   - In the `src/components/` directory, create a new file named `Header.js` (component files are typically PascalCased).\n   - Add the following code to create a simple Header component:\n   ```jsx\n   // Import the React library at the top of the file\n   // This import is necessary to write JSX syntax\n   import React from 'react';\n\n   // Define a functional component using arrow function syntax\n   // Alternatively, you could use: function Header() { ... }\n   const Header = () => {\n     // Components must return JSX that describes what should be rendered\n     return (\n       // This is a JSX fragment that contains our header content\n       // You can add more complex structure here as needed\n       <header>\n         <h1>Welcome to My React App</h1>\n         <p>This is my first custom component!</p>\n       </header>\n     );\n   };\n\n   // Export the component as the default export\n   // This allows other files to import and use this component\n   export default Header;\n   ```\n   - Now, import and use your new component in `App.js`:\n   ```jsx\n   // Import the Header component from its location\n   // The './' indicates the current directory, and we're navigating to the components folder\n   import Header from './components/Header';\n   import './App.css';\n\n   function App() {\n     return (\n       <div className=\"App\">\n         {/* Render the Header component using JSX syntax */}\n         <Header />\n         {/* You can add more components here as you build your app */}\n       </div>\n     );\n   }\n\n   export default App;\n   ```\n   - Save all files and observe how your browser automatically updates to display the new header component.",
            },
            {
                page: 5,
                page_title: "Step 5: Styling and Assets",
                body: "# Step 5: Styling and Assets\n\n## Comprehensive Guide to Styling and Asset Management\n\n1. **Add CSS**:  \n   - React applications can be styled in multiple ways, offering flexibility based on your preferences and project requirements.\n   - For global styles that apply across your entire application, you can add CSS rules to the `index.css` file. This is useful for CSS resets, font imports, and defining CSS variables (custom properties).\n   - For component-specific styles, you have several options:\n     - Regular CSS files: Create a separate CSS file for each component (e.g., `Header.css`) and import it into your component file.\n     - CSS Modules: Create files with the `.module.css` extension (e.g., `Header.module.css`) which automatically scope class names to avoid conflicts.\n     - CSS-in-JS: Use libraries like styled-components or emotion that allow you to write CSS directly in your JavaScript files.\n     - CSS Frameworks: Integrate popular frameworks like Bootstrap, Tailwind CSS, or Material-UI for pre-designed components and utilities.\n   - Example of using a regular CSS file for our Header component:\n     - Create `Header.css` in the components folder:\n     ```css\n     .header {\n       background-color: #f8f9fa;\n       padding: 20px;\n       text-align: center;\n       box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n     }\n     \n     .header h1 {\n       color: #333;\n       margin: 0;\n       font-family: 'Arial', sans-serif;\n     }\n     ```\n     - Import it in `Header.js`:\n     ```jsx\n     import React from 'react';\n     import './Header.css';\n     \n     const Header = () => {\n       return (\n         <header className=\"header\">\n           <h1>Welcome to My React App</h1>\n         </header>\n       );\n     };\n     \n     export default Header;\n     ```\n\n2. **Import Images and Other Assets**:  \n   - To better organize your static assets, create an `assets` folder inside the `src` directory: `mkdir src/assets`\n   - You can place images, icons, fonts, and other media files in this folder.\n   - To use an image in a component, first import it at the top of your file:\n   ```jsx\n   import logo from './assets/logo.png';\n   ```\n   - Then use it in your JSX:\n   ```jsx\n   const Header = () => {\n     return (\n       <header className=\"header\">\n         <img src={logo} alt=\"App Logo\" />\n         <h1>Welcome to My React App</h1>\n       </header>\n     );\n   };\n   ```\n   - Note that this import syntax is made possible by Webpack, which processes and optimizes imported assets.\n   - For SVG files, you can either import them as image sources (as above) or import them as React components if you're using Create React App 2.0+:\n   ```jsx\n   import { ReactComponent as Logo } from './assets/logo.svg';\n   \n   // Then use as a component:\n   <Logo />\n   ```",
            },
            {
                page: 6,
                page_title: "Step 6: Final Steps",
                body: "# Step 6: Final Steps\n\n## Comprehensive Project Finalization Guide\n\n1. **Test Your Setup**:  \n   - Ensure the development server is still running with `npm start`. If not, restart it from your project directory.\n   - Thoroughly test your application by checking different browser views and device simulations using your browser's developer tools.\n   - Verify that there are no errors or warnings in the browser console (press F12 to open developer tools).\n   - Test the hot-reloading functionality by making a small change to one of your components and confirming the browser updates automatically without a full page refresh.\n   - Check that all components are rendering correctly and that styles are being applied as expected.\n\n2. **Build for Production**:  \n   - When you're ready to deploy your application, create an optimized production build with:\n   ```bash\n   npm run build\n   ```\n   - This command creates a `build` folder containing optimized and minified versions of all your files, ready for deployment.\n   - The build process performs numerous optimizations including:\n     - Bundling and minifying JavaScript files\n     - Optimizing CSS and extracting it into separate files\n     - Generating source maps for debugging\n     - Compressing and optimizing images and other assets\n     - Creating unique filenames for long-term caching\n   - You can test the production build locally by installing a simple HTTP server:\n   ```bash\n   npm install -g serve\n   serve -s build\n   ```\n   - This will serve your built application, typically on port 5000, allowing you to verify everything works correctly before deployment.\n\n3. **Next Steps and Advanced Configuration**:  \n   - Consider adding routing to your application using `react-router-dom`:\n   ```bash\n   npm install react-router-dom\n   ```\n   - For state management, you might explore options like:\n     - React's built-in Context API and useReducer hook for medium complexity apps\n     - Redux with React-Redux bindings for complex state management needs\n     - Other state management libraries like MobX or Zustand\n   - Enhance your UI with component libraries such as:\n     - Material-UI (MUI)\n     - React Bootstrap\n     - Ant Design\n     - Chakra UI\n   - For HTTP requests, consider using libraries like Axios or the built-in fetch API.\n   - Implement testing with Jest (already included in Create React App) and React Testing Library:\n   ```bash\n   npm install --save-dev @testing-library/react @testing-library/jest-dom\n   ```\n\n**Additional Important Notes**:  \n- Always use `npm install <package-name>` to add new dependencies to your project  \n- For component exports, consistently use either `export default` for single exports per file or named exports for multiple exports  \n- Remember to restart your development server after installing new packages to ensure they're properly recognized  \n- Regularly update your dependencies to receive security patches and new features using `npm update`  \n- Consider setting up ESLint and Prettier for code linting and formatting consistency across your project  \n- Explore the possibility of implementing custom hooks for reusable logic across multiple components  \n- Familiarize yourself with React's performance optimization techniques such as React.memo, useMemo, and useCallback for larger applications",
            },
        ],
        last_page_read: 2,
        overall_progress: 40.0,
        bookmarked_date: "2024-10-01",
    },
];
